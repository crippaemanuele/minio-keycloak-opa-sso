{"addrs":["0.0.0.0:8181"],"diagnostic-addrs":[],"level":"info","msg":"Initializing server.","time":"2025-06-03T08:25:31Z"}
{"level":"debug","msg":"Failed to determine uid/gid of process owner","time":"2025-06-03T08:25:31Z"}
{"level":"debug","msg":"maxprocs: Leaving GOMAXPROCS=6: CPU quota undefined","time":"2025-06-03T08:25:31Z"}
{"level":"debug","msg":"Server initialized.","time":"2025-06-03T08:25:31Z"}
{"headers":{"Content-Type":["application/json"],"User-Agent":["Open Policy Agent/1.3.0 (linux, amd64)"]},"level":"debug","method":"POST","msg":"Sending request.","time":"2025-06-03T08:25:31Z","url":"https://telemetry.openpolicyagent.org/v1/version"}
{"err":"Post \"https://telemetry.openpolicyagent.org/v1/version\": context deadline exceeded","level":"debug","msg":"Unable to send OPA version report.","time":"2025-06-03T08:25:36Z"}
{"client_addr":"127.0.0.1:55824","level":"info","msg":"Received request.","req_body":"package httpapi.authz\n\ndefault allow := false\n\n# Consentito se medico\nallow if {\n\tis_amministratore\n}\n\nallow if {\n\tis_medico\n\tinput.input.action == \"s3:GetObject\"\n}\n\nallow if {\n\tis_medico\n\tinput.input.action == \"s3:PutObject\"\n}\n\n# Consentito se segretario e solo in lettura\nallow if {\n\tis_segreteria\n\tinput.input.action == \"s3:GetObject\"\n}\n\n# Consentito se paziente e il documento è intestato a lui\nallow if {\n\tis_paziente\n\tinput.input.action == \"s3:GetObject\"\n\tdocument_intestato_all_utente\n}\n\nallow if {\n\tinput.input.account == \"minio\"\n}\n\n# Helper per controllare il gruppo\nis_amministratore if {\n    input.input.claims.policy == \"amministratore\"\n}\n\nis_medico if {\n\tinput.input.claims.policy == \"medici\"\n}\n\nis_segreteria if {\n\tinput.input.claims.policy == \"segreteria\"\n}\n\nis_paziente if {\n\tinput.input.claims.policy == \"pazienti\"\n}\n\n# Controlla se l'oggetto contiene il nome dell'utente\ndocument_intestato_all_utente if {\n\tcognome_nome := lower(replace(input.input.claims.family_name, \"_\", input.input.claims.given_name))\n\tcontains(lower(input.input.object), cognome_nome)\n}\n","req_id":1,"req_method":"PUT","req_params":{},"req_path":"/v1/policies/opa/old/main","time":"2025-06-03T08:25:45Z"}
{"client_addr":"127.0.0.1:55824","level":"info","msg":"Sent response.","req_id":1,"req_method":"PUT","req_path":"/v1/policies/opa/old/main","resp_body":"{}\n","resp_bytes":3,"resp_duration":2.363609,"resp_status":200,"time":"2025-06-03T08:25:45Z"}
{"client_addr":"127.0.0.1:55826","level":"info","msg":"Received request.","req_body":"package httpapi.authz\n\ndefault allow := false\n\n# Consentito se amministratore con tutte le azioni\nallow if {\n    is_amministratore\n}\n\n# Consentito se medico e non cancella bucket\nallow if {\n    is_medico\n    input.input.action != \"s3:DeleteBucket\"\n}\n\n# Consentito se segretario e solo in lettura\nallow if {\n    is_segreteria\n    input.input.action in read_only_actions\n}\n\n# Consentito se paziente e il documento è intestato a lui\nallow if {\n    is_paziente\n    input.input.action in read_only_actions\n    document_intestato_all_utente\n}\n\n# Account di servizio MinIO\nallow if {\n    input.input.account == \"minio\"\n}\n\n# Helper per controllare il gruppo\nis_amministratore if {\n    \"amministratori\" in input.input.claims.policy\n}\n\nis_medico if {\n    \"medici\" in input.input.claims.policy\n}\n\nis_segreteria if {\n    \"segreteria\" in input.input.claims.policy\n}\n\nis_paziente if {\n    \"pazienti\" in input.input.claims.policy\n}\n\n# Controlla se l'oggetto contiene il nome dell'utente (MIGLIORATA)\ndocument_intestato_all_utente if {\n    family_name := lower(input.input.claims.family_name)\n    given_name := lower(input.input.claims.given_name)\n    object_name := lower(input.input.object)\n    \n    # Verifica diverse combinazioni nome-cognome\n    contains(object_name, sprintf(\"%s_%s\", [family_name, given_name]))\n}\n\ndocument_intestato_all_utente if {\n    family_name := lower(input.input.claims.family_name)\n    given_name := lower(input.input.claims.given_name)\n    object_name := lower(input.input.object)\n    \n    # Verifica anche cognome-nome\n    contains(object_name, sprintf(\"%s_%s\", [given_name, family_name]))\n}\n\n# Lista completa delle azioni S3 di sola lettura\nread_only_actions := {\n    # Listing generale\n    \"s3:ListAllMyBuckets\",\n    \"s3:GetService\",\n    \n    # Bucket operations (read)\n    \"s3:ListBucket\",\n    \"s3:ListBucketVersions\",\n    \"s3:ListBucketMultipartUploads\",\n    \"s3:GetBucketLocation\",\n    \"s3:GetBucketVersioning\",\n    \"s3:GetBucketAcl\",\n    \"s3:GetBucketCORS\",\n    \"s3:GetBucketPolicy\",\n    \"s3:GetBucketLogging\",\n    \"s3:GetBucketNotification\",\n    \"s3:GetBucketTagging\",\n    \"s3:GetBucketWebsite\",\n    \"s3:GetBucketInventory\",\n    \"s3:GetBucketMetrics\",\n    \"s3:GetBucketAnalytics\",\n    \"s3:GetBucketAccelerateConfiguration\",\n    \"s3:GetBucketRequestPayment\",\n    \"s3:GetBucketReplication\",\n    \"s3:GetBucketEncryption\",\n    \"s3:GetBucketLifecycleConfiguration\",\n    \"s3:HeadBucket\",\n    \n    # Object operations (read)\n    \"s3:GetObject\",\n    \"s3:GetObjectVersion\",\n    \"s3:GetObjectAcl\",\n    \"s3:GetObjectVersionAcl\",\n    \"s3:GetObjectTagging\",\n    \"s3:GetObjectVersionTagging\",\n    \"s3:GetObjectTorrent\",\n    \"s3:GetObjectRetention\",\n    \"s3:GetObjectLegalHold\",\n    \"s3:HeadObject\",\n    \n    # Multipart operations (read)\n    \"s3:ListMultipartUploadParts\",\n    \n    # Query operations\n    \"s3:SelectObjectContent\",\n}","req_id":2,"req_method":"PUT","req_params":{},"req_path":"/v1/policies/opa/prova/main","time":"2025-06-03T08:25:45Z"}
{"client_addr":"127.0.0.1:55826","level":"info","msg":"Sent response.","req_id":2,"req_method":"PUT","req_path":"/v1/policies/opa/prova/main","resp_body":"{\n  \"code\": \"invalid_parameter\",\n  \"message\": \"error(s) occurred while compiling module(s)\",\n  \"errors\": [\n    {\n      \"code\": \"rego_type_error\",\n      \"message\": \"multiple default rules data.httpapi.authz.allow found at opa/old/main:3, opa/prova/main:3\",\n      \"location\": {\n        \"file\": \"opa/old/main\",\n        \"row\": 1,\n        \"col\": 1\n      }\n    }\n  ]\n}\n","resp_bytes":363,"resp_duration":11.009022,"resp_status":400,"time":"2025-06-03T08:25:45Z"}
{"client_addr":"127.0.0.1:55826","level":"info","msg":"Received request.","req_body":"package httpapi.authz\n\ndefault allow := false\n\n# Consentito se amministratore con tutte le azioni\nallow if {\n    is_amministratore\n}\n\n# Consentito se medico e non cancella bucket\nallow if {\n    is_medico\n    input.input.action != \"s3:DeleteBucket\"\n}\n\n# Consentito se segretario e solo in lettura\nallow if {\n    is_segreteria\n    input.input.action in read_only_actions\n}\n\n# Consentito se paziente e il documento è intestato a lui\nallow if {\n    is_paziente\n    input.input.action in read_only_actions\n    document_intestato_all_utente\n}\n\n# Account di servizio MinIO\nallow if {\n    input.input.account == \"minio\"\n}\n\n# Helper per controllare il gruppo\nis_amministratore if {\n    \"amministratori\" in input.input.claims.policy\n}\n\nis_medico if {\n    \"medici\" in input.input.claims.policy\n}\n\nis_segreteria if {\n    \"segreteria\" in input.input.claims.policy\n}\n\nis_paziente if {\n    \"pazienti\" in input.input.claims.policy\n}\n\n# Controlla se l'oggetto contiene il nome dell'utente (MIGLIORATA)\ndocument_intestato_all_utente if {\n    family_name := lower(input.input.claims.family_name)\n    given_name := lower(input.input.claims.given_name)\n    object_name := lower(input.input.object)\n    \n    # Verifica diverse combinazioni nome-cognome\n    contains(object_name, sprintf(\"%s_%s\", [family_name, given_name]))\n}\n\ndocument_intestato_all_utente if {\n    family_name := lower(input.input.claims.family_name)\n    given_name := lower(input.input.claims.given_name)\n    object_name := lower(input.input.object)\n    \n    # Verifica anche cognome-nome\n    contains(object_name, sprintf(\"%s_%s\", [given_name, family_name]))\n}\n\n# Lista completa delle azioni S3 di sola lettura\nread_only_actions := {\n    # Listing generale\n    \"s3:ListAllMyBuckets\",\n    \"s3:GetService\",\n    \n    # Bucket operations (read)\n    \"s3:ListBucket\",\n    \"s3:ListBucketVersions\",\n    \"s3:ListBucketMultipartUploads\",\n    \"s3:GetBucketLocation\",\n    \"s3:GetBucketVersioning\",\n    \"s3:GetBucketAcl\",\n    \"s3:GetBucketCORS\",\n    \"s3:GetBucketPolicy\",\n    \"s3:GetBucketLogging\",\n    \"s3:GetBucketNotification\",\n    \"s3:GetBucketTagging\",\n    \"s3:GetBucketWebsite\",\n    \"s3:GetBucketInventory\",\n    \"s3:GetBucketMetrics\",\n    \"s3:GetBucketAnalytics\",\n    \"s3:GetBucketAccelerateConfiguration\",\n    \"s3:GetBucketRequestPayment\",\n    \"s3:GetBucketReplication\",\n    \"s3:GetBucketEncryption\",\n    \"s3:GetBucketLifecycleConfiguration\",\n    \"s3:HeadBucket\",\n    \n    # Object operations (read)\n    \"s3:GetObject\",\n    \"s3:GetObjectVersion\",\n    \"s3:GetObjectAcl\",\n    \"s3:GetObjectVersionAcl\",\n    \"s3:GetObjectTagging\",\n    \"s3:GetObjectVersionTagging\",\n    \"s3:GetObjectTorrent\",\n    \"s3:GetObjectRetention\",\n    \"s3:GetObjectLegalHold\",\n    \"s3:HeadObject\",\n    \n    # Multipart operations (read)\n    \"s3:ListMultipartUploadParts\",\n    \n    # Query operations\n    \"s3:SelectObjectContent\",\n}","req_id":3,"req_method":"PUT","req_params":{},"req_path":"/v1/policies/opa/prova/main","time":"2025-06-03T08:25:45Z"}
{"client_addr":"127.0.0.1:55826","level":"info","msg":"Sent response.","req_id":3,"req_method":"PUT","req_path":"/v1/policies/opa/prova/main","resp_body":"{\n  \"code\": \"invalid_parameter\",\n  \"message\": \"error(s) occurred while compiling module(s)\",\n  \"errors\": [\n    {\n      \"code\": \"rego_type_error\",\n      \"message\": \"multiple default rules data.httpapi.authz.allow found at opa/old/main:3, opa/prova/main:3\",\n      \"location\": {\n        \"file\": \"opa/old/main\",\n        \"row\": 1,\n        \"col\": 1\n      }\n    }\n  ]\n}\n","resp_bytes":363,"resp_duration":9.520422,"resp_status":400,"time":"2025-06-03T08:25:45Z"}
{"client_addr":"127.0.0.1:55826","level":"info","msg":"Received request.","req_body":"package httpapi.authz\n\ndefault allow := false\n\n# Consentito se amministratore con tutte le azioni\nallow if {\n    is_amministratore\n}\n\n# Consentito se medico e non cancella bucket\nallow if {\n    is_medico\n    input.input.action != \"s3:DeleteBucket\"\n}\n\n# Consentito se segretario e solo in lettura\nallow if {\n    is_segreteria\n    input.input.action in read_only_actions\n}\n\n# Consentito se paziente e il documento è intestato a lui\nallow if {\n    is_paziente\n    input.input.action in read_only_actions\n    document_intestato_all_utente\n}\n\n# Account di servizio MinIO\nallow if {\n    input.input.account == \"minio\"\n}\n\n# Helper per controllare il gruppo\nis_amministratore if {\n    \"amministratori\" in input.input.claims.policy\n}\n\nis_medico if {\n    \"medici\" in input.input.claims.policy\n}\n\nis_segreteria if {\n    \"segreteria\" in input.input.claims.policy\n}\n\nis_paziente if {\n    \"pazienti\" in input.input.claims.policy\n}\n\n# Controlla se l'oggetto contiene il nome dell'utente (MIGLIORATA)\ndocument_intestato_all_utente if {\n    family_name := lower(input.input.claims.family_name)\n    given_name := lower(input.input.claims.given_name)\n    object_name := lower(input.input.object)\n    \n    # Verifica diverse combinazioni nome-cognome\n    contains(object_name, sprintf(\"%s_%s\", [family_name, given_name]))\n}\n\ndocument_intestato_all_utente if {\n    family_name := lower(input.input.claims.family_name)\n    given_name := lower(input.input.claims.given_name)\n    object_name := lower(input.input.object)\n    \n    # Verifica anche cognome-nome\n    contains(object_name, sprintf(\"%s_%s\", [given_name, family_name]))\n}\n\n# Lista completa delle azioni S3 di sola lettura\nread_only_actions := {\n    # Listing generale\n    \"s3:ListAllMyBuckets\",\n    \"s3:GetService\",\n    \n    # Bucket operations (read)\n    \"s3:ListBucket\",\n    \"s3:ListBucketVersions\",\n    \"s3:ListBucketMultipartUploads\",\n    \"s3:GetBucketLocation\",\n    \"s3:GetBucketVersioning\",\n    \"s3:GetBucketAcl\",\n    \"s3:GetBucketCORS\",\n    \"s3:GetBucketPolicy\",\n    \"s3:GetBucketLogging\",\n    \"s3:GetBucketNotification\",\n    \"s3:GetBucketTagging\",\n    \"s3:GetBucketWebsite\",\n    \"s3:GetBucketInventory\",\n    \"s3:GetBucketMetrics\",\n    \"s3:GetBucketAnalytics\",\n    \"s3:GetBucketAccelerateConfiguration\",\n    \"s3:GetBucketRequestPayment\",\n    \"s3:GetBucketReplication\",\n    \"s3:GetBucketEncryption\",\n    \"s3:GetBucketLifecycleConfiguration\",\n    \"s3:HeadBucket\",\n    \n    # Object operations (read)\n    \"s3:GetObject\",\n    \"s3:GetObjectVersion\",\n    \"s3:GetObjectAcl\",\n    \"s3:GetObjectVersionAcl\",\n    \"s3:GetObjectTagging\",\n    \"s3:GetObjectVersionTagging\",\n    \"s3:GetObjectTorrent\",\n    \"s3:GetObjectRetention\",\n    \"s3:GetObjectLegalHold\",\n    \"s3:HeadObject\",\n    \n    # Multipart operations (read)\n    \"s3:ListMultipartUploadParts\",\n    \n    # Query operations\n    \"s3:SelectObjectContent\",\n}","req_id":4,"req_method":"PUT","req_params":{},"req_path":"/v1/policies/opa/prova/main","time":"2025-06-03T08:25:45Z"}
{"client_addr":"127.0.0.1:55826","level":"info","msg":"Sent response.","req_id":4,"req_method":"PUT","req_path":"/v1/policies/opa/prova/main","resp_body":"{\n  \"code\": \"invalid_parameter\",\n  \"message\": \"error(s) occurred while compiling module(s)\",\n  \"errors\": [\n    {\n      \"code\": \"rego_type_error\",\n      \"message\": \"multiple default rules data.httpapi.authz.allow found at opa/old/main:3, opa/prova/main:3\",\n      \"location\": {\n        \"file\": \"opa/old/main\",\n        \"row\": 1,\n        \"col\": 1\n      }\n    }\n  ]\n}\n","resp_bytes":363,"resp_duration":1.95166,"resp_status":400,"time":"2025-06-03T08:25:45Z"}