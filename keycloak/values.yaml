# ===========================
# Impostazioni globali
# ===========================
global:
  imageRegistry: ""  # Registry globale per le immagini Docker
  imagePullSecrets: []  # Lista di secret per accedere a registry privati
  defaultStorageClass: ""  # Classe di storage predefinita per PVC
  storageClass: ""  # Classe di storage da usare per i volumi

  security:
    allowInsecureImages: false  # Se true, consente l'uso di immagini non sicure (sconsigliato)

  compatibility:
    openshift:
      adaptSecurityContext: auto  # Adatta automaticamente i security context per OpenShift

# Versione di Kubernetes richiesta (può servire per compatibilità)
kubeVersion: ""

# ===========================
# Override dei nomi
# ===========================
nameOverride: ""  # Sovrascrive il nome del rilascio Helm
fullnameOverride: ""  # Sovrascrive il nome completo delle risorse
namespaceOverride: ""  # Sovrascrive il namespace di installazione

commonLabels: {}  # Etichette comuni da applicare a tutte le risorse
commonAnnotations: {}  # Annotazioni comuni da applicare a tutte le risorse

# Abilita o disabilita i service link automatici nei pod
enableServiceLinks: true

# Configurazione DNS
dnsPolicy: ""  # Politica DNS per i pod
dnsConfig: {}  # Configurazioni DNS avanzate
clusterDomain: cluster.local  # Dominio DNS del cluster

# Risorse da deployare aggiuntive (es. ConfigMap custom)
extraDeploy: []

# ===========================
# Modalità diagnostica (debug)
# ===========================
usePasswordFiles: true  # Se true, monta file di password da secret

diagnosticMode:
  enabled: false  # Se true, abilita la modalità diagnostica (es. per troubleshooting)
  command:
    - sleep
  args:
    - infinity

# ===========================
# Immagine Docker di Keycloak
# ===========================
image:
  registry: docker.io  # Registry Docker
  repository: bitnami/keycloak  # Repository dell'immagine
  tag: 26.2.3-debian-12-r0  # Tag dell'immagine
  digest: ""  # Digest dell'immagine (opzionale)
  pullPolicy: IfNotPresent  # Politica di pull dell'immagine
  pullSecrets: []  # Secrets per il pull dell'immagine
  debug: false  # Se true, abilita il debug dell'immagine

# ===========================
# Credenziali dell'admin Keycloak
# ===========================
auth:
  adminUser: user  # Nome utente dell'amministratore
  adminPassword: ""  # Password dell'amministratore (usa secret se possibile)
  existingSecret: ""  # Nome del secret esistente con la password
  passwordSecretKey: ""  # Chiave del secret dove trovare la password
  annotations: {}  # Annotazioni da applicare al secret

# Secret contenente certificato CA personalizzato (opzionale)
customCaExistingSecret: ""

# ===========================
# TLS (HTTPS)
# ===========================
tls:
  enabled: false  # Abilita o disabilita HTTPS
  autoGenerated: false  # Se true, genera certificati self-signed
  existingSecret: ""  # Secret esistente con i certificati TLS
  usePem: false  # Se true, usa certificati in formato PEM
  truststoreFilename: "keycloak.truststore.jks"  # Nome del truststore
  keystoreFilename: "keycloak.keystore.jks"  # Nome del keystore
  keystorePassword: ""  # Password per il keystore
  truststorePassword: ""  # Password per il truststore
  passwordsSecret: ""  # Secret che contiene le password sopra

# ===========================
# SPI (Service Provider Interface)
# ===========================
spi:
  existingSecret: ""  # Secret con configurazione SPI
  truststorePassword: ""  # Password del truststore SPI
  truststoreFilename: "keycloak-spi.truststore.jks"  # Nome file del truststore
  passwordsSecret: ""  # Secret contenente password del truststore
  hostnameVerificationPolicy: ""  # Politica di verifica hostname SPI

# Nome del realm amministrativo
adminRealm: "master"

# Se true, attiva configurazioni per ambienti di produzione
production: false

# ===========================
# Configurazioni proxy
# ===========================
proxyHeaders: ""  # Configurazione per gestire header da un proxy (X-Forwarded-*)
proxy: ""  # Tipo di proxy (es. edge, reencrypt, passthrough)
httpRelativePath: "/"  # Percorso relativo su cui Keycloak è esposto
configuration: ""  # Configurazione Keycloak (formato stringa)
existingConfigmap: ""  # ConfigMap esistente con la configurazione
extraStartupArgs: ""  # Argomenti addizionali all'avvio

# ===========================
# Script di inizializzazione
# ===========================
enableDefaultInitContainers: true  # Abilita i container di init predefiniti
initdbScripts: {}  # Script da eseguire all'avvio
initdbScriptsConfigMap: ""  # ConfigMap con gli script

# Comandi e argomenti per il container
command: []
args: []

# ===========================
# Variabili d’ambiente
# ===========================
extraEnvVars: []  # Lista di variabili d'ambiente extra
extraEnvVarsCM: ""  # ConfigMap con variabili d'ambiente
extraEnvVarsSecret: ""  # Secret con variabili d'ambiente

# ===========================
# Replica e strategia di update
# ===========================
replicaCount: 1  # Numero di repliche del pod
revisionHistoryLimitCount: 10  # Numero massimo di revisioni conservate

# ===========================
# Porte del container
# ===========================
containerPorts:
  http: 8080  # Porta HTTP interna
  https: 8443  # Porta HTTPS interna
  metrics: 9000  # Porta per metriche Prometheus

extraContainerPorts: []  # Altre porte aggiuntive

# ===========================
# Sicurezza del pod
# ===========================
statefulsetAnnotations: {}  # Annotazioni sullo StatefulSet

podSecurityContext:
  enabled: true
  fsGroupChangePolicy: Always
  sysctls: []
  supplementalGroups: []
  fsGroup: 1001  # Gruppo filesystem del container

containerSecurityContext:
  enabled: true
  seLinuxOptions: {}
  runAsUser: 1001  # Utente del container
  runAsGroup: 1001  # Gruppo del container
  runAsNonRoot: true  # Non permettere utente root
  privileged: false
  readOnlyRootFilesystem: true  # Filesystem in sola lettura
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]  # Rimuove tutte le capability Linux
  seccompProfile:
    type: "RuntimeDefault"  # Profilo seccomp predefinito

# ===========================
# Risorse e probe
# ===========================
resourcesPreset: "small"  # Preset delle risorse (può essere medium, large, etc.)
resources: {}  # Specifica delle risorse CPU/Memoria

livenessProbe:
  enabled: true  # Verifica se il container è vivo
  initialDelaySeconds: 300
  periodSeconds: 1
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  enabled: true  # Verifica se il container è pronto
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1

startupProbe:
  enabled: false  # Sonda di avvio (utile per container lenti a partire)

customLivenessProbe: {}  # Sonda liveness personalizzata
customReadinessProbe: {}  # Sonda readiness personalizzata
customStartupProbe: {}  # Sonda startup personalizzata

lifecycleHooks: {}  # Hook di ciclo di vita dei pod

# ===========================
# Scheduling e nodi
# ===========================
automountServiceAccountToken: true
hostAliases: []  # Alias /etc/hosts per i pod
podLabels: {}
podAnnotations: {}

# Affinità e tolleranze
podAffinityPreset: ""
podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: ""
  key: ""
  values: []
affinity: {}
nodeSelector: {}
tolerations: []
topologySpreadConstraints: []
podManagementPolicy: Parallel  # Parallel o OrderedReady

priorityClassName: ""  # Classe di priorità del pod
schedulerName: ""  # Scheduler Kubernetes
terminationGracePeriodSeconds: ""  # Tempo di attesa allo shutdown

# Strategia di aggiornamento
updateStrategy:
  type: RollingUpdate
  rollingUpdate: {}

minReadySeconds: 0  # Minimo tempo prima che un pod sia considerato pronto

# ===========================
# Volumi extra e container
# ===========================
extraVolumes: []  # Volumi aggiuntivi
extraVolumeMounts: []  # Mount point per i volumi extra
initContainers: []  # Init containers personalizzati
sidecars: []  # Containers sidecar

# ===========================
# Servizio Kubernetes
# ===========================
service:
  type: ClusterIP  # Tipo di servizio
  http:
    enabled: true
  ports:
    http: 80
    https: 443
  nodePorts:
    http: ""
    https: ""
  sessionAffinity: None  # Nessuna affinità di sessione
  sessionAffinityConfig: {}
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster  # Politica di traffico esterno
  annotations: {}
  extraPorts: []
  extraHeadlessPorts: []
  headless:
    annotations: {}
    extraPorts: []

# ===========================
# Ingress Keycloak
# ===========================
ingress:
  enabled: true  # Abilita l'Ingress
  ingressClassName: nginx
  pathType: ImplementationSpecific
  apiVersion: ""
  controller: default
  hostname: keycloak.local
  hostnameStrict: false
  path: "{{ .Values.httpRelativePath }}"
  servicePort: http
  annotations: {}
  labels: {}
  tls: false
  selfSigned: false
  extraHosts: []
  extraPaths: []
  extraTls: []
  secrets: []
  extraRules: []

# Ingress per l’admin Keycloak
adminIngress:
  enabled: false
  ingressClassName: ""
  pathType: ImplementationSpecific
  apiVersion: ""
  controller: default
  hostname: keycloak.local
  path: "{{ .Values.httpRelativePath }}"
  servicePort: http
  annotations: {}
  labels: {}
  tls: false
  selfSigned: false
  extraHosts: []
  extraPaths: []
  extraTls: []
  secrets: []
  extraRules: []

# ===========================
# Politiche di rete
# ===========================
networkPolicy:
  enabled: true  # Abilita le NetworkPolicy
  allowExternal: true  # Permette accesso da fonti esterne
  allowExternalEgress: true  # Permette uscita verso l'esterno
  kubeAPIServerPorts: [443, 6443, 8443]
  extraIngress: []
  extraEgress: []
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}

# ===========================
# Service Account e RBAC
# ===========================
serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: false
  annotations: {}
  extraLabels: {}

rbac:
  create: false
  rules: []  # Regole RBAC personalizzate

# ===========================
# PodDisruptionBudget
# ===========================
pdb:
  create: true
  minAvailable: ""
  maxUnavailable: ""

# ===========================
# Autoscaling (disabilitato)
# ===========================
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 11
  targetCPU: ""
  targetMemory: ""
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 120
      selectPolicy: Max
      policies: []
    scaleDown:
      stabilizationWindowSeconds: 300
      selectPolicy: Max
      policies:
        - type: Pods
          value: 1
          periodSeconds: 300

# ===========================
# Metriche e Prometheus
# ===========================
metrics:
  enabled: false
  service:
    ports:
      http: 8080
      https: 8443
      metrics: 9000
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.service.ports.metrics }}"
    extraPorts: []
  serviceMonitor:
    enabled: false
    port: metrics
    scheme: http
    tlsConfig: {}
    endpoints:
      - path: '{{ include "keycloak.httpPath" . }}metrics'
      - path: '{{ include "keycloak.httpPath" . }}realms/{{ .Values.adminRealm }}/metrics'
        port: http
    path: ""
    namespace: ""
    interval: 30s
    scrapeTimeout: ""
    labels: {}
    selector: {}
    relabelings: []
    metricRelabelings: []
    honorLabels: false
    jobLabel: ""
  prometheusRule:
    enabled: false
    namespace: ""
    labels: {}
    groups: []

# ===========================
# Config CLI (import config Realm)
# ===========================
keycloakConfigCli:
  enabled: true  # Abilita il container keycloak-config-cli
  image:
    registry: docker.io  # Registry Docker
    repository: bitnami/keycloak-config-cli  # Repository dell'immagine keycloak-config-cli
    tag: 6.4.0-debian-12-r5  # Tag dell'immagine
    pullPolicy: IfNotPresent  # Politica di pull dell'immagine
  args:
    - --import.files.locations=/config/realm-export.json  # Percorso del file JSON da importare
  extraEnvVars: []
  extraVolumes:
    - name: realm-config  # Nome del volume per il file del realm
      configMap:
        name: keycloak-realm-config  # Nome della ConfigMap contenente il file JSON
  extraVolumeMounts:
    - name: realm-config
      mountPath: /config  # Percorso in cui montare il file JSON
  podAnnotations: {}  # Annotazioni per il pod
  podLabels: {}  # Etichette per il pod

# ===========================
# Database interno PostgreSQL
# ===========================
postgresql:
  enabled: true  # Abilita PostgreSQL integrato
  auth:
    postgresPassword: ""  # Password utente postgres
    username: bn_keycloak  # Utente Keycloak
    password: ""  # Password utente Keycloak
    database: bitnami_keycloak  # Nome del DB
    existingSecret: ""  # Secret esistente con le credenziali
    secretKeys:
      userPasswordKey: password  # Chiave all'interno del secret

# ===========================
# Database esterno (disabilita PostgreSQL interno)
# ===========================
externalDatabase:
  host: ""  # Host del DB esterno
  port: 5432
  user: bn_keycloak
  database: bitnami_keycloak
  password: ""
  existingSecret: ""
  existingSecretHostKey: ""
  existingSecretPortKey: ""
  existingSecretUserKey: ""
  existingSecretDatabaseKey: ""
  existingSecretPasswordKey: ""
  annotations: {}

# ===========================
# Cache infinispan
# ===========================
cache:
  enabled: true
  stackName: kubernetes  # Nome dello stack Infinispan
  stackFile: ""  # File di configurazione (non usato se vuoto)
  useHeadlessServiceWithAppVersion: false

# ===========================
# Logging
# ===========================
logging:
  output: default  # Output log (default o json)
  level: INFO  # Livello log: DEBUG, INFO, WARN, ERROR
