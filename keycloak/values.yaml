global:
  imageRegistry: "" # Global Docker image registry [cite: 66, 67]
  imagePullSecrets: [] # Global Docker registry secret names as an array [cite: 66, 67]
  defaultStorageClass: "" # Global default StorageClass for Persistent Volume(s) [cite: 66, 67]
  storageClass: "" # DEPRECATED: use global.defaultStorageClass instead [cite: 66, 67]
  security:
    allowInsecureImages: false # Allows skipping image verification [cite: 67]
  compatibility:
    openshift:
      adaptSecurityContext: auto # Adapt securityContext for Openshift (auto, force, disabled) [cite: 67, 68]

kubeVersion: "" # Force target Kubernetes version [cite: 68]
nameOverride: "" # String to partially override common.names.fullname [cite: 68]
fullnameOverride: "" # String to fully override common.names.fullname [cite: 68]
namespaceOverride: "" # String to fully override common.names.namespace [cite: 68]
commonLabels: {} # Labels to add to all deployed objects [cite: 68]
enableServiceLinks: true # Enable Kubernetes service links in the pod spec [cite: 68, 69]
commonAnnotations: {} # Annotations to add to all deployed objects [cite: 69]
dnsPolicy: "" # DNS Policy for pod [cite: 69, 70]
dnsConfig: {} # DNS Configuration pod [cite: 70]
clusterDomain: cluster.local # Default Kubernetes cluster domain [cite: 71]
extraDeploy: [] # Array of extra objects to deploy with the release [cite: 71]
usePasswordFiles: true # Mount credentials as files instead of using environment variables [cite: 71]

diagnosticMode:
  enabled: false # Enable diagnostic mode [cite: 71, 72]
  command:
    - sleep # Command to override all containers in the statefulset [cite: 71, 72]
  args:
    - infinity # Args to override all containers in the statefulset [cite: 72]

image:
  registry: docker.io # Keycloak image registry [cite: 72, 73]
  repository: bitnami/keycloak # Keycloak image repository [cite: 72, 73]
  tag: 26.2.0-debian-12-r2 # Keycloak image tag [cite: 73]
  digest: "" # Keycloak image digest (overrides tag) [cite: 72, 73]
  pullPolicy: IfNotPresent # Keycloak image pull policy [cite: 72, 73]
  pullSecrets: [] # Docker registry secret names as an array [cite: 72, 73, 74]
  debug: false # Enable debug logs [cite: 74]

auth:
  adminUser: user # Keycloak administrator user [cite: 74]
  adminPassword: "" # Keycloak administrator password [cite: 74]
  existingSecret: "" # Existing secret containing Keycloak admin password [cite: 74]
  passwordSecretKey: "" # Key where the Keycloak admin password is being stored [cite: 74, 75]
  annotations: {} # Additional custom annotations for Keycloak auth secret object [cite: 75]

customCaExistingSecret: "" # Secret containing custom CA certificates for Keycloak [cite: 75, 76, 77]

tls:
  enabled: false # Enable TLS encryption [cite: 77, 78]
  autoGenerated: false # Generate automatically self-signed TLS certificates [cite: 78, 79]
  existingSecret: "" # Secret containing TLS certificates [cite: 79, 80, 81, 82]
  usePem: false # Use PEM certificates instead of JKS stores [cite: 82, 83]
  truststoreFilename: "keycloak.truststore.jks" # Truststore filename inside the existing secret [cite: 83]
  keystoreFilename: "keycloak.keystore.jks" # Keystore filename inside the existing secret [cite: 83]
  keystorePassword: "" # Password to access the keystore [cite: 83]
  truststorePassword: "" # Password to access the truststore [cite: 83, 84]
  passwordsSecret: "" # Secret containing the Keystore and Truststore passwords [cite: 83, 84]

spi:
  existingSecret: "" # Secret containing the Keycloak truststore for SPI connection over HTTPS/TLS [cite: 85, 86]
  truststorePassword: "" # Password to access the truststore [cite: 86]
  truststoreFilename: "keycloak-spi.truststore.jks" # Truststore filename inside the existing secret [cite: 86]
  passwordsSecret: "" # Secret containing the SPI Truststore passwords [cite: 86, 87]
  hostnameVerificationPolicy: "" # Verify the hostname of the server's certificate (ANY, WILDCARD, STRICT) [cite: 87, 88]

adminRealm: "master" # Name of the admin realm [cite: 88]
production: false # Run Keycloak in production mode [cite: 88, 89]
proxyHeaders: "" # Set Keycloak proxy headers [cite: 89]
proxy: "" # Reverse Proxy mode (DEPRECATED: use proxyHeaders) [cite: 89]
httpRelativePath: "/" # Set the path relative to '/' for serving resources [cite: 89, 90]

configuration: "" # Keycloak Configuration (keycloak.conf) [cite: 90, 91]
existingConfigmap: "" # Name of existing ConfigMap with Keycloak configuration [cite: 91]
extraStartupArgs: "" # Extra default startup args [cite: 91]
enableDefaultInitContainers: true # Deploy default init containers [cite: 91, 92, 93]
initdbScripts: {} # Dictionary of initdb scripts [cite: 93, 94]
initdbScriptsConfigMap: "" # ConfigMap with the initdb scripts (Overrides `initdbScripts`) [cite: 94]

command: [] # Override default container command [cite: 94]
args: [] # Override default container args [cite: 94]
extraEnvVars: [] # Extra environment variables to be set on Keycloak container [cite: 94]
extraEnvVarsCM: "" # Name of existing ConfigMap containing extra env vars [cite: 94]
extraEnvVarsSecret: "" # Name of existing Secret containing extra env vars [cite: 94, 95]

replicaCount: 1 # Number of Keycloak replicas to deploy [cite: 95]
revisionHistoryLimitCount: 10 # Number of controller revisions to keep [cite: 95]

containerPorts:
  http: 8080 # Keycloak HTTP container port [cite: 95]
  https: 8443 # Keycloak HTTPS container port [cite: 95]
  metrics: 9000 # Keycloak metrics container port [cite: 95]

extraContainerPorts: [] # Optionally specify extra list of additional port-mappings [cite: 95]
statefulsetAnnotations: {} # Optionally add extra annotations on the statefulset resource [cite: 95]

podSecurityContext:
  enabled: true # Enabled Keycloak pods' Security Context [cite: 96]
  fsGroupChangePolicy: Always # Set filesystem group change policy [cite: 96]
  sysctls: [] # Set kernel settings using the sysctl interface [cite: 96]
  supplementalGroups: [] # Set filesystem extra groups [cite: 96]
  fsGroup: 1001 # Set Keycloak pod's Security Context fsGroup [cite: 96]

containerSecurityContext:
  enabled: true # Enabled containers' Security Context [cite: 96, 97]
  seLinuxOptions: {} # Set SELinux options in container [cite: 96, 97]
  runAsUser: 1001 # Set containers' Security Context runAsUser [cite: 96, 97]
  runAsGroup: 1001 # Set containers' Security Context runAsGroup [cite: 96, 97]
  runAsNonRoot: true # Set container's Security Context runAsNonRoot [cite: 96, 97]
  privileged: false # Set container's Security Context privileged [cite: 96, 97]
  readOnlyRootFilesystem: true # Set container's Security Context readOnlyRootFilesystem [cite: 96, 97]
  allowPrivilegeEscalation: false # Prevent privilege escalation [cite: 97]
  capabilities:
    drop:
      - "ALL" # Drop all capabilities [cite: 97]
  seccompProfile:
    type: "RuntimeDefault" # Set seccomp profile [cite: 97]

resourcesPreset: "small" # Resources preset [cite: 97]
resources: {} # Resources requests and limits [cite: 97]

livenessProbe:
  enabled: true # Enable liveness probe [cite: 97, 98]
  initialDelaySeconds: 300 # Initial delay seconds for liveness probe [cite: 97, 98]
  periodSeconds: 1 # Period seconds for liveness probe [cite: 97, 98]
  timeoutSeconds: 5 # Timeout seconds for liveness probe [cite: 97, 98]
  failureThreshold: 3 # Failure threshold for liveness probe [cite: 97, 98]
  successThreshold: 1 # Success threshold for liveness probe [cite: 97, 98]

readinessProbe:
  enabled: true # Enable readiness probe [cite: 97, 98]
  initialDelaySeconds: 30 # Initial delay seconds for readiness probe [cite: 97, 98]
  periodSeconds: 10 # Period seconds for readiness probe [cite: 97, 98]
  timeoutSeconds: 1 # Timeout seconds for readiness probe [cite: 97, 98]
  failureThreshold: 3 # Failure threshold for readiness probe [cite: 97, 98]
  successThreshold: 1 # Success threshold for readiness probe [cite: 97, 98]

startupProbe:
  enabled: false # Enable startup probe [cite: 98]
  initialDelaySeconds: 30 # Initial delay seconds for startup probe [cite: 98]
  periodSeconds: 5 # Period seconds for startup probe [cite: 98]
  timeoutSeconds: 1 # Timeout seconds for startup probe [cite: 98]
  failureThreshold: 60 # Failure threshold for startup probe [cite: 98]
  successThreshold: 1 # Success threshold for startup probe [cite: 98]

customLivenessProbe: {} # Custom liveness probe [cite: 98]
customReadinessProbe: {} # Custom readiness probe [cite: 98]
customStartupProbe: {} # Custom startup probe [cite: 98]
lifecycleHooks: {} # Lifecycle hooks [cite: 98]
automountServiceAccountToken: true # Automount Service Account Token [cite: 98, 99]
hostAliases: [] # Host aliases [cite: 99]
podLabels: {} # Pod labels [cite: 99]
podAnnotations: {} # Pod annotations [cite: 99]
podAffinityPreset: "" # Pod affinity preset [cite: 99]
podAntiAffinityPreset: soft # Pod anti-affinity preset [cite: 99]
nodeAffinityPreset:
  type: "" # Node affinity preset type [cite: 99]
  key: "" # Node affinity preset key [cite: 99]
  values: [] # Node affinity preset values [cite: 99]
affinity: {} # Affinity [cite: 99]
nodeSelector: {} # Node selector [cite: 99]
tolerations: [] # Tolerations [cite: 99, 100]
topologySpreadConstraints: [] # Topology Spread Constraints [cite: 100]
podManagementPolicy: Parallel # Pod management policy [cite: 100]
priorityClassName: "" # Priority class name [cite: 100]
schedulerName: "" # Scheduler name [cite: 100]
terminationGracePeriodSeconds: "" # Termination grace period seconds [cite: 100]
updateStrategy:
  type: RollingUpdate # Update strategy type [cite: 100]
  rollingUpdate: {} # Rolling update parameters [cite: 100]
minReadySeconds: 0 # Minimum ready seconds [cite: 100]
extraVolumes: [] # Extra volumes [cite: 100]
extraVolumeMounts: [] # Extra volume mounts [cite: 100, 101]
initContainers: [] # Init containers [cite: 101]
sidecars: [] # Sidecars [cite: 101]

service:
  type: ClusterIP # Service type [cite: 101]
  http:
    enabled: true # Enable HTTP service [cite: 101]
  ports:
    http: 80 # HTTP port [cite: 101]
    https: 443 # HTTPS port [cite: 101]
  nodePorts:
    http: "" # HTTP node port [cite: 101]
    https: "" # HTTPS node port [cite: 101]
  sessionAffinity: None # Session affinity [cite: 101, 102]
  sessionAffinityConfig: {} # Session affinity config [cite: 102]
  clusterIP: "" # Cluster IP [cite: 102]
  loadBalancerIP: "" # Load balancer IP [cite: 102]
  loadBalancerSourceRanges: [] # Load balancer source ranges [cite: 102]
  externalTrafficPolicy: Cluster # External traffic policy [cite: 102]
  annotations: {} # Service annotations [cite: 102]
  extraPorts: [] # Extra ports [cite: 102]
  extraHeadlessPorts: [] # Extra headless ports [cite: 102]
  headless:
    annotations: {} # Headless service annotations [cite: 102]
    extraPorts: [] # Headless service extra ports [cite: 102]

ingress:
  enabled: false # Enable ingress [cite: 102, 103]
  ingressClassName: "" # Ingress class name (Kubernetes 1.18+) [cite: 103]
  pathType: ImplementationSpecific # Ingress path type [cite: 103]
  apiVersion: "" # Ingress API version [cite: 103]
  controller: default # Ingress controller type (default, gce) [cite: 103, 359, 360, 361]
  hostname: keycloak.local # Default host for the ingress record [cite: 103, 361]
  hostnameStrict: false #  Enforce strict hostname matching [cite: 103]
  path: "{{ .Values.httpRelativePath }}" # Default path for the ingress record [cite: 103, 361]
  servicePort: http # Backend service port to use (http, https) [cite: 103, 361, 362]
  annotations: {} # Ingress annotations [cite: 103, 362, 363]
  labels: {} # Ingress labels [cite: 103, 363, 364]
  tls: false # Enable TLS configuration [cite: 103, 364, 365]
  selfSigned: false # Create a TLS secret using self-signed certificates [cite: 365]
  extraHosts: [] # Additional hostnames to be covered with the ingress record [cite: 365]
  extraPaths: [] # Additional paths for the ingress [cite: 365, 366, 367]
  extraTls: [] # TLS configuration for additional hostnames [cite: 367, 368]
  secrets: [] # TLS secrets [cite: 368, 369]
  extraRules: [] # Additional rules for the ingress [cite: 369, 370]

adminIngress:
  enabled: false # @param adminIngress.enabled Enable admin ingress record generation for Keycloak [cite: 293]
  ingressClassName: "" # @param adminIngress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+) [cite: 293, 294]
  pathType: ImplementationSpecific # @param adminIngress.pathType Ingress path type [cite: 294]
  apiVersion: "" # @param adminIngress.apiVersion Force Ingress API version (automatically detected if not set) [cite: 294]
  controller: default # @param adminIngress.controller The ingress controller type. Currently supports `default` and `gce` [cite: 294, 295, 296]
  hostname: keycloak.local # @param adminIngress.hostname Default host for the admin ingress record (evaluated as template) [cite: 296]
  path: "{{ .Values.httpRelativePath }}" # @param adminIngress.path [string] Default path for the admin ingress record (evaluated as template) [cite: 296]
  servicePort: http # @param adminIngress.servicePort Backend service port to use. Default is http. Alternative is https. [cite: 296, 297]
  annotations: {} # @param adminIngress.annotations [object] Additional annotations for the Ingress resource. [cite: 297, 298]
  labels: {} # @param adminIngress.labels Additional labels for the Ingress resource. [cite: 298, 299]
  tls: false # @param adminIngress.tls Enable TLS configuration for the host defined at `adminIngress.hostname` parameter [cite: 299, 300]
  selfSigned: false # @param adminIngress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm [cite: 300]
  extraHosts: [] # @param adminIngress.extraHosts An array with additional hostname(s) to be covered with the admin ingress record [cite: 300]
  extraPaths: [] # @param adminIngress.extraPaths Any additional arbitrary paths that may need to be added to the admin ingress under the main host. [cite: 300, 301, 302]
  extraTls: [] # @param adminIngress.extraTls The tls configuration for additional hostnames to be covered with this ingress record. [cite: 302, 303]
  secrets: [] # @param adminIngress.secrets If you're providing your own certificates, please use this to add the certificates as secrets [cite: 303, 304]
  extraRules: [] # @param adminIngress.extraRules Additional rules to be covered with this ingress record [cite: 304, 305]
networkPolicy:
  enabled: true # @param networkPolicy.enabled Specifies whether a NetworkPolicy should be created [cite: 305]
  allowExternal: true # @param networkPolicy.allowExternal Don't require server label for connections [cite: 305, 306, 306, 307, 308]
  allowExternalEgress: true # @param networkPolicy.allowExternalEgress Allow the pod to access any range of port and all destinations. [cite: 308, 309]
  kubeAPIServerPorts: # @param networkPolicy.kubeAPIServerPorts [array] List of possible endpoints to kube-apiserver (limit to your cluster settings to increase security) [cite: 309]
  - 443
  - 6443
  - 8443
  extraIngress: [] # @param networkPolicy.extraIngress [array] Add extra ingress rules to the NetworkPolicy [cite: 309]
  extraEgress: [] # @param networkPolicy.extraEgress [array] Add extra ingress rules to the NetworkPolicy [cite: 311]
  ingressNSMatchLabels: {} # @param networkPolicy.ingressNSMatchLabels [object] Labels to match to allow traffic from other namespaces [cite: 313]
  ingressNSPodMatchLabels: {} # @param networkPolicy.ingressNSPodMatchLabels [object] Pod labels to match to allow traffic from other namespaces [cite: 313]
serviceAccount:
  create: true # @param serviceAccount.create Enable the creation of a ServiceAccount for Keycloak pods [cite: 313]
  name: "" # @param serviceAccount.name Name of the created ServiceAccount [cite: 313, 314]
  automountServiceAccountToken: false # @param serviceAccount.automountServiceAccountToken Auto-mount the service account token in the pod [cite: 314]
  annotations: {} # @param serviceAccount.annotations Additional custom annotations for the ServiceAccount [cite: 314]
  extraLabels: {} # @param serviceAccount.extraLabels Additional labels for the ServiceAccount [cite: 314]
rbac:
  create: false # @param rbac.create Whether to create and use RBAC resources or not [cite: 314]
  rules: [] # @param rbac.rules Custom RBAC rules [cite: 314, 315]
pdb:
  create: true # @param pdb.create Enable/disable a Pod Disruption Budget creation [cite: 315]
  minAvailable: "" # @param pdb.minAvailable Minimum number/percentage of pods that should remain scheduled [cite: 315, 316]
  maxUnavailable: "" # @param pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable [cite: 316]
autoscaling:
  enabled: false # @param autoscaling.enabled Enable autoscaling for Keycloak [cite: 316]
  minReplicas: 1 # @param autoscaling.minReplicas Minimum number of Keycloak replicas [cite: 316]
  maxReplicas: 11 # @param autoscaling.maxReplicas Maximum number of Keycloak replicas [cite: 316, 317]
  targetCPU: "" # @param autoscaling.targetCPU Target CPU utilization percentage [cite: 317]
  targetMemory: "" # @param autoscaling.targetMemory Target Memory utilization percentage [cite: 317]
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 120 # @param autoscaling.behavior.scaleUp.stabilizationWindowSeconds The number of seconds for which past recommendations should be considered while scaling up [cite: 263, 264]
      selectPolicy: Max # @param autoscaling.behavior.scaleUp.selectPolicy The priority of policies that the autoscaler will apply when scaling up [cite: 264]
      policies: [] # @param autoscaling.behavior.scaleUp.policies [array] HPA scaling policies when scaling up [cite: 264]
    scaleDown:
      stabilizationWindowSeconds: 300 # @param autoscaling.behavior.scaleDown.stabilizationWindowSeconds The number of seconds for which past recommendations should be considered while scaling down [cite: 264]
      selectPolicy: Max # @param autoscaling.behavior.scaleDown.selectPolicy The priority of policies that the autoscaler will apply when scaling down [cite: 264]
      policies:
      - type: Pods # @param autoscaling.behavior.scaleDown.policies [array] HPA scaling policies when scaling down [cite: 264]
        value: 1
        periodSeconds: 300
metrics:
  enabled: false # @param metrics.enabled Enable exposing Keycloak statistics [cite: 265]
  service:
    ports:
      http: 8080 # @param metrics.service.ports.http Metrics service HTTP port [cite: 265]
      https: 8443 # @param metrics.service.ports.https Metrics service HTTPS port [cite: 265]
      metrics: 9000 # @param metrics.service.ports.metrics Metrics service Metrics port [cite: 265]
    annotations: # @param metrics.service.annotations [object] Annotations for enabling prometheus to access the metrics endpoints [cite: 265]
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.service.ports.metrics }}"
    extraPorts: [] # @param metrics.service.extraPorts [array] Add additional ports to the keycloak metrics service (i.e. admin port 9000) [cite: 265, 266]
  serviceMonitor:
    enabled: false # @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator [cite: 266]
    port: metrics # @param metrics.serviceMonitor.port Metrics service HTTP port [cite: 266]
    scheme: http # @param metrics.serviceMonitor.scheme Metrics service scheme [cite: 266]
    tlsConfig: {} # @param metrics.serviceMonitor.tlsConfig Metrics service TLS configuration [cite: 266]
    endpoints: # @param metrics.serviceMonitor.endpoints [array] Endpoints to be selected by the ServiceMonitor [cite: 266]
    - path: '{{ include "keycloak.httpPath" .  }}metrics'
    - path: '{{ include "keycloak.httpPath" .  }}realms/{{ .Values.adminRealm }}/metrics'
      port: http
    path: "" # @param metrics.serviceMonitor.path Path to the metrics endpoint. [cite: 266]
    namespace: "" # @param metrics.serviceMonitor.namespace Namespace where the ServiceMonitor is located [cite: 266]
    interval: 30s # @param metrics.serviceMonitor.interval How frequently Prometheus should scrape [cite: 266]
    scrapeTimeout: "" # @param metrics.serviceMonitor.scrapeTimeout How long Prometheus should wait for a response before timing out. [cite: 266]
    labels: {} # @param metrics.serviceMonitor.labels Labels to add to the ServiceMonitor [cite: 266]
    selector: {} # @param metrics.serviceMonitor.selector Labels to select the Services that this ServiceMonitor monitors. [cite: 266]
    relabelings: [] # @param metrics.serviceMonitor.relabelings List of relabeling configurations to control how the scraping process labels the metrics. [cite: 266]
    metricRelabelings: [] # @param metrics.serviceMonitor.metricRelabelings List of relabeling configurations to control how the scraping process labels the scraped metrics. [cite: 266]
    honorLabels: false # @param metrics.serviceMonitor.honorLabels Boolean that controls whether Prometheus respects the scraped data's existing labels. [cite: 266]
    jobLabel: "" # @param metrics.serviceMonitor.jobLabel label names that specifies the name of the job. [cite: 266]
  prometheusRule:
    enabled: false # @param metrics.prometheusRule.enabled Enable a PrometheusRule to define alerting rules [cite: 266]
    namespace: "" # @param metrics.prometheusRule.namespace Namespace where the PrometheusRule is located [cite: 266]
    labels: {} # @param metrics.prometheusRule.labels Labels to add to the PrometheusRule [cite: 266]
    groups: [] # @param metrics.prometheusRule.groups List of alert rules [cite: 266]
keycloakConfigCli:
  enabled: false # @param keycloakConfigCli.enabled Enable the Keycloak Config CLI job [cite: 266]
  image:
    registry: docker.io # @param keycloakConfigCli.image.registry [default: global.imageRegistry] Keycloak Config CLI image registry [cite: 266]
    repository: bitnami/keycloak-config-cli # @param keycloakConfigCli.image.repository [default: bitnami/keycloak-config-cli] Keycloak Config CLI image repository [cite: 266]
    tag: 6.4.0-debian-12-r3 # @param keycloakConfigCli.image.tag [default: 6.4.0-debian-12-r3] Keycloak Config CLI image tag [cite: 266]
    digest: "" # @param keycloakConfigCli.image.digest Keycloak Config CLI image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag [cite: 266]
    pullPolicy: IfNotPresent # @param keycloakConfigCli.image.pullPolicy Keycloak Config CLI image pull policy [cite: 266]
    pullSecrets: [] # @param keycloakConfigCli.image.pullSecrets Specify docker-registry secret names as an array [cite: 266]
  annotations:
    helm.sh/hook: "post-install,post-upgrade,post-rollback"
    helm.sh/hook-delete-policy: "hook-succeeded,before-hook-creation"
    helm.sh/hook-weight: "5"
  command: [] # @param keycloakConfigCli.command Override default container command (useful when using custom images) [cite: 28]
  args: [] # @param keycloakConfigCli.args Override default container args (useful when using custom images) [cite: 29]
  automountServiceAccountToken: true # @param keycloakConfigCli.automountServiceAccountToken Auto-mount the service account token in the pod [cite: 37]
  hostAliases: [] #  @param hostAliases Deployment pod host aliases [cite: 149, 150]
  resourcesPreset: "small" # @param resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). [cite: 145, 146, 147]
  resources: {} # @param resources Set container requests and limits for different resources like CPU or memory (essential for production workloads) [cite: 147]
  containerSecurityContext:
    enabled: true # @param containerSecurityContext.enabled Enabled containers' Security Context [cite: 144]
    seLinuxOptions: {} # @param containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container [cite: 144]
    runAsUser: 1001 # @param containerSecurityContext.runAsUser Set containers' Security Context runAsUser [cite: 144, 145]
    runAsGroup: 1001 # @param containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup [cite: 145]
    runAsNonRoot: true # @param containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot [cite: 145, 32]
    privileged: false # @param containerSecurityContext.privileged Set container's Security Context privileged [cite: 145, 32]
    readOnlyRootFilesystem: true # @param containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem [cite: 145, 32]
    allowPrivilegeEscalation: false # @param containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation [cite: 145, 32]
    capabilities:
      drop: ["ALL"] # @param containerSecurityContext.capabilities.drop List of capabilities to be dropped [cite: 145, 32]
    seccompProfile:
      type: "RuntimeDefault" # @param containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile [cite: 145, 32]
  podSecurityContext:
    enabled: true # @param podSecurityContext.enabled Enabled Keycloak pods' Security Context [cite: 143, 144, 31]
    fsGroupChangePolicy: Always # @param podSecurityContext.fsGroupChangePolicy Set filesystem group change policy [cite: 144, 31]
    sysctls: [] # @param podSecurityContext.sysctls Set kernel settings using the sysctl interface [cite: 144, 31]
    supplementalGroups: [] # @param podSecurityContext.supplementalGroups Set filesystem extra groups [cite: 144, 31]
    fsGroup: 1001 # @param podSecurityContext.fsGroup Set Keycloak pod's Security Context fsGroup [cite: 144, 31]
  backoffLimit: 1
  podLabels: {} # @param podLabels Extra labels for Keycloak pods [cite: 150, 37]
  podAnnotations: {} # @param podAnnotations Annotations for Keycloak pods [cite: 150, 37]
  nodeSelector: {} # @param nodeSelector Node labels for pod assignment [cite: 42]
  podTolerations: [] # @param tolerations Tolerations for pod assignment [cite: 42]
  extraEnvVars: [] # @param extraEnvVars Extra environment variables to be set on Keycloak container [cite: 29]
  extraEnvVarsCM: "" # @param extraEnvVarsCM Name of existing ConfigMap containing extra env vars
  extraEnvVarsSecret: "" # @param keycloakConfigCli.extraEnvVarsSecret Name of existing Secret
  extraVolumes: [] # @param keycloakConfigCli.extraVolumes Extra volumes to add to the job
  extraVolumeMounts: [] # @param keycloakConfigCli.extraVolumeMounts Extra volume mounts to add to the container
  initContainers: [] # @param keycloakConfigCli.initContainers Add additional init containers to the Keycloak config cli pod
  sidecars: [] # @param keycloakConfigCli.sidecars Add additional sidecar containers to the Keycloak config cli pod
  configuration: {} # @param keycloakConfigCli.configuration keycloak-config-cli realms configuration
  existingConfigmap: "" # @param keycloakConfigCli.existingConfigmap ConfigMap with keycloak-config-cli configuration
  cleanupAfterFinished: # Automatic Cleanup for Finished Jobs
    enabled: false # @param keycloakConfigCli.cleanupAfterFinished.enabled Enables Cleanup for Finished Jobs
    seconds: 600 # @param keycloakConfigCli.cleanupAfterFinished.seconds Sets the value of ttlSecondsAfterFinished

postgresql:
  enabled: true # @param postgresql.enabled Switch to enable or disable the PostgreSQL helm chart
  auth:
    postgresPassword: "" # @param postgresql.auth.postgresPassword Password for the "postgres" admin user.
    username: bn_keycloak # @param postgresql.auth.username Name for a custom user to create
    password: "" # @param postgresql.auth.password Password for the custom user to create
    database: bitnami_keycloak # @param postgresql.auth.database Name for a custom database to create
    existingSecret: "" # @param postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials
    secretKeys:
      userPasswordKey: password # @param postgresql.auth.secretKeys.userPasswordKey Name of key in existing secret to use for PostgreSQL credentials.
  architecture: standalone # @param postgresql.architecture PostgreSQL architecture (`standalone` or `replication`)
## External PostgreSQL configuration
## All of these values are only used when postgresql.enabled is set to false
externalDatabase:
  host: "" # @param externalDatabase.host Database host
  port: 5432 # @param externalDatabase.port Database port number
  user: bn_keycloak # @param externalDatabase.user Non-root username for Keycloak
  database: bitnami_keycloak # @param externalDatabase.database Keycloak database name
  password: "" # @param externalDatabase.password Password for the non-root username for Keycloak
  existingSecret: "" # @param externalDatabase.existingSecret Name of an existing secret resource containing the database credentials
  existingSecretHostKey: "" # @param externalDatabase.existingSecretHostKey Name of an existing secret key containing the database host name
  existingSecretPortKey: "" # @param externalDatabase.existingSecretPortKey Name of an existing secret key containing the database port
  existingSecretUserKey: "" # @param externalDatabase.existingSecretUserKey Name of an existing secret key containing the database user
  existingSecretDatabaseKey: "" # @param externalDatabase.existingSecretDatabaseKey Name of an existing secret key containing the database name
  existingSecretPasswordKey: "" # @param externalDatabase.existingSecretPasswordKey Name of an existing secret key containing the database credentials
  annotations: {} # @param externalDatabase.annotations Additional custom annotations for external database secret object
cache:
  enabled: true # @param cache.enabled Switch to enable or disable the keycloak distributed cache for kubernetes.
  stackName: kubernetes # @param cache.stackName Set infinispan cache stack to use
  stackFile: "" # @param cache.stackFile Set infinispan cache stack filename to use
  useHeadlessServiceWithAppVersion: false # @param cache.useHeadlessServiceWithAppVersion Set to true to create the headless service used for ispn containing the app version
logging:
  output: default # @param logging.output Alternates between the default log output format or json format
  level: INFO # @param logging.level Allowed values as documented: FATAL, ERROR, WARN, INFO, DEBUG, TRACE, ALL, OFF