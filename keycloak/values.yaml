# Impostazioni globali per il chart Helm
global:
  imageRegistry: ''  # Registro per le immagini dei container
  imagePullSecrets: []  # Segreti per il pull delle immagini da registri privati
  defaultStorageClass: ''  # Classe di storage predefinita per i volumi persistenti
  storageClass: ''  # Classe di storage specifica da utilizzare
  security:
    allowInsecureImages: false  # Non consentire immagini container insicure
  compatibility:
    openshift:
      adaptSecurityContext: auto  # Adatta automaticamente il contesto di sicurezza per OpenShift

# Compatibilità con versioni di Kubernetes
kubeVersion: ''  # Versione minima di Kubernetes richiesta

# Override per le convenzioni di denominazione
nameOverride: ''  # Sovrascrive il nome del rilascio
fullnameOverride: ''  # Sovrascrive il nome completo del rilascio
namespaceOverride: ''  # Sovrascrive il namespace del rilascio

# Etichette e annotazioni comuni
commonLabels: {}  # Etichette applicate a tutte le risorse
enableServiceLinks: true  # Abilita le variabili di ambiente dei servizi nei pod
commonAnnotations: {}  # Annotazioni applicate a tutte le risorse

# Impostazioni DNS e di rete
dnsPolicy: ''  # Politica DNS per i pod
dnsConfig: {}  # Configurazione DNS personalizzata
clusterDomain: cluster.local  # Nome del dominio del cluster
extraDeploy: []  # Manifest aggiuntivi da distribuire

# Gestione delle password
usePasswordFiles: true  # Usa file per le password invece delle variabili di ambiente

# Modalità diagnostica per il debug
diagnosticMode:
  enabled: false  # Abilita la modalità diagnostica
  command:
    - sleep  # Comando da eseguire in modalità diagnostica
  args:
    - infinity  # Argomenti per il comando

# Configurazione dell'immagine per l'applicazione
image:
  registry: docker.io  # Registro Docker
  repository: bitnami/keycloak  # Repository per l'immagine di Keycloak
  tag: 26.1.4-debian-12-r2  # Tag dell'immagine
  digest: ''  # Digest dell'immagine (opzionale)
  pullPolicy: IfNotPresent  # Politica di pull dell'immagine
  pullSecrets: []  # Segreti per il pull dell'immagine
  debug: false  # Abilita la modalità debug per il container

# Configurazione dell'autenticazione
auth:
  adminUser: user  # Nome utente amministratore predefinito
  adminPassword: ''  # Password amministratore predefinita (vuota di default)
  existingSecret: ''  # Secret contenente le credenziali dell'amministratore
  passwordSecretKey: ''  # Chiave per la password dell'amministratore nel secret
  annotations: {}  # Annotazioni per il secret

customCaExistingSecret: ''
# Configurazione TLS
tls:
  enabled: false  # Abilita TLS per Keycloak
  autoGenerated: false  # Genera automaticamente i certificati TLS
  existingSecret: ''  # Secret contenente i certificati TLS
  usePem: false  # Usa il formato PEM per i certificati
  truststoreFilename: keycloak.truststore.jks  # Nome del truststore
  keystoreFilename: keycloak.keystore.jks  # Nome del keystore
  keystorePassword: ''  # Password del keystore
  truststorePassword: ''  # Password del truststore
  passwordsSecret: ''  # Secret contenente le password di keystore/truststore

# Configurazione SPI (Service Provider Interface)
spi:
  existingSecret: ''  # Secret per la configurazione SPI
  truststorePassword: ''  # Password per il truststore SPI
  truststoreFilename: keycloak-spi.truststore.jks  # Nome del truststore SPI
  passwordsSecret: ''  # Secret contenente le password SPI
  hostnameVerificationPolicy: ''  # Politica di verifica del nome host

# Configurazione del realm amministrativo
adminRealm: master  # Realm amministrativo predefinito

# Modalità di distribuzione
production: false  # Abilita la modalità produzione

# Proxy settings
proxyHeaders: ''  # Headers for proxy configuration
proxy: ''  # Proxy URL
httpRelativePath: /  # Relative path for HTTP requests

# Configuration management
configuration: ''  # Custom Keycloak configuration
existingConfigmap: ''  # ConfigMap containing custom configuration
extraStartupArgs: ''  # Additional arguments for the startup command

# Resource management
resourcesPreset: small  # Preset for resource requests/limits
resources: {}  # Custom resource requests/limits

# Probes for container health checks
livenessProbe:
  enabled: true  # Enable liveness probe
  initialDelaySeconds: 300  # Delay before the first probe
  periodSeconds: 1  # Frequency of the probe
  timeoutSeconds: 5  # Timeout for the probe
  failureThreshold: 3  # Number of failures before marking the container as unhealthy
  successThreshold: 1  # Number of successes before marking the container as healthy

# Readiness probe configuration
readinessProbe:
  enabled: true  # Enable readiness probe
  initialDelaySeconds: 30  # Delay before the first probe
  periodSeconds: 10  # Frequency of the probe
  timeoutSeconds: 1  # Timeout for the probe
  failureThreshold: 3  # Number of failures before marking the container as not ready
  successThreshold: 1  # Number of successes before marking the container as ready

# Startup probe configuration
startupProbe:
  enabled: false  # Enable startup probe
  initialDelaySeconds: 30  # Delay before the first probe
  periodSeconds: 5  # Frequency of the probe
  timeoutSeconds: 1  # Timeout for the probe
  failureThreshold: 60  # Number of failures before marking the container as failed
  successThreshold: 1  # Number of successes before marking the container as started

# Service configuration
service:
  type: ClusterIP  # Tipo di servizio
  http:
    enabled: true  # Abilita il servizio HTTP
  ports:
    http: 80  # Porta HTTP
    https: 443  # Porta HTTPS
  nodePorts:
    http: ''  # NodePort for HTTP (if applicable)
    https: ''  # NodePort for HTTPS (if applicable)
  sessionAffinity: None  # Session affinity setting
  sessionAffinityConfig: {}  # Additional session affinity configuration
  clusterIP: ''  # ClusterIP for the service
  loadBalancerIP: ''  # LoadBalancer IP (if applicable)
  loadBalancerSourceRanges: []  # Source ranges for LoadBalancer
  externalTrafficPolicy: Cluster  # Traffic policy for external access
  annotations: {}  # Annotazioni per il servizio
  extraPorts: []  # Additional ports for the service
  extraHeadlessPorts: []
  headless:
    annotations: {}
    extraPorts: []

# Ingress configuration
ingress:
  enabled: true  # Enable ingress
  ingressClassName: nginx  # Ingress class name
  pathType: ImplementationSpecific  # Path type for ingress rules
  apiVersion: ''  # API version for ingress resources
  controller: default  # Ingress controller
  hostname: keycloak.local  # Hostname for the ingress
  hostnameStrict: false  # Enforce strict hostname matching
  path: '{{ .Values.httpRelativePath }}'  # Path for the ingress
  servicePort: http  # Service port for the ingress
  annotations:  # Annotations for the ingress
    cert-manager.io/issuer: keycloak-ca-issuer  # Cert-manager annotation for TLS
  labels: {}  # Labels for the ingress
  tls: true  # Enable TLS for the ingress
  selfSigned: false  # Use self-signed certificates
  extraHosts: []  # Additional hosts for the ingress
  extraPaths: []  # Additional paths for the ingress
  extraTls: []  # Additional TLS configuration
  extraRules: []
  secrets:
  - name: keycloak.local-tls  # Nome del secret TLS

adminIngress:
  enabled: false
  ingressClassName: ''
  pathType: ImplementationSpecific
  apiVersion: ''
  controller: default
  hostname: keycloak.local
  path: '{{ .Values.httpRelativePath }}'
  servicePort: http
  annotations: {}
  labels: {}
  tls: false
  selfSigned: false
  extraHosts: []
  extraPaths: []
  extraTls: []
  secrets: []
  extraRules: []
networkPolicy:
  enabled: true
  allowExternal: true
  allowExternalEgress: true
  kubeAPIServerPorts:
    - 443
    - 6443
    - 8443
  extraIngress: []
  extraEgress: []
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}
serviceAccount:
  create: true
  name: ''
  automountServiceAccountToken: false
  annotations: {}
  extraLabels: {}
rbac:
  create: false
  rules: []
pdb:
  create: true
  minAvailable: ''
  maxUnavailable: ''
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 11
  targetCPU: ''
  targetMemory: ''
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 120
      selectPolicy: Max
      policies: []
    scaleDown:
      stabilizationWindowSeconds: 300
      selectPolicy: Max
      policies:
        - type: Pods
          value: 1
          periodSeconds: 300
metrics:
  enabled: false
  service:
    ports:
      http: 8080
      https: 8443
      metrics: 9000
    annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
    extraPorts: []
  serviceMonitor:
    enabled: false
    port: metrics
    scheme: http
    tlsConfig: {}
    endpoints:
      - path: '{{ include "keycloak.httpPath" . }}metrics'
      - path: >-
          {{ include "keycloak.httpPath" . }}realms/{{ .Values.adminRealm
          }}/metrics
        port: http
    path: ''
    namespace: ''
    interval: 30s
    scrapeTimeout: ''
    labels: {}
    selector: {}
    relabelings: []
    metricRelabelings: []
    honorLabels: false
    jobLabel: ''
  prometheusRule:
    enabled: false
    namespace: ''
    labels: {}
    groups: []
keycloakConfigCli:
  enabled: true
  configuration:
    minio-realm.json: |
      {
        "realm":"MinIO",
        "enabled":true,
        "registrationAllowed":true,
        "groups": [ 
        {
          "name": "consoleAdmins",
          "path": "/consoleAdmins",
          "subGroups": [],
          "attributes": {
            "policy": [
              "consoleAdmin"
            ]
          },
          "realmRoles": [],
          "clientRoles": {}
        },
        {
            "name": "leggiScrittori",
            "path": "/leggiScrittori",
            "subGroups": [],
            "attributes": {
              "policy": [
                "readwrite"
              ]
            },
            "realmRoles": [],
            "clientRoles": {}
          }
        ],
        "clients": [
            {
                "id": "bc2f33a1-9f15-4a1b-9eb8-ea9fcca931b1",
                "clientId": "minio-client",
                "name": "MinIO SSO Client",
                "description": "",
                "rootUrl": "${authBaseUrl}",
                "adminUrl": "https://minio.local",
                "baseUrl": "/realms/minio-sso/account/",
                "surrogateAuthRequired": false,
                "enabled": true,
                "alwaysDisplayInConsole": true,
                "clientAuthenticatorType": "client-secret",
                "secret": "**********",
                "redirectUris": [
                  "https://minio-console.local/oauth_callback"
                ],
                "webOrigins": [
                  "https://minio-console.local"
                ],
                "notBefore": 0,
                "bearerOnly": false,
                "consentRequired": false,
                "standardFlowEnabled": true,
                "implicitFlowEnabled": false,
                "directAccessGrantsEnabled": true,
                "serviceAccountsEnabled": false,
                "publicClient": false,
                "frontchannelLogout": false,
                "protocol": "openid-connect",
                "attributes": {
                  "realm_client": "false",
                  "oidc.ciba.grant.enabled": "false",
                  "client.secret.creation.time": "1746093202",
                  "backchannel.logout.session.required": "true",
                  "display.on.consent.screen": "false",
                  "oauth2.device.authorization.grant.enabled": "false",
                  "use.jwks.url": "true",
                  "backchannel.logout.revoke.offline.tokens": "false"
                },
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": true,
                "nodeReRegistrationTimeout": -1,
                "defaultClientScopes": [
                  "web-origins",
                  "acr",
                  "profile",
                  "roles",
                  "minio-authorization",
                  "basic",
                  "email"
                ],
                "optionalClientScopes": [
                  "address",
                  "phone",
                  "organization",
                  "offline_access",
                  "microprofile-jwt"
                ]
            }
        ],
        "clientScopes": [
            {
                "id": "bc0581a3-8553-4961-a688-1f2acf747ec1",
                "name": "minio-authorization",
                "description": "",
                "protocol": "openid-connect",
                "attributes": {
                  "include.in.token.scope": "true",
                  "display.on.consent.screen": "true",
                  "gui.order": "",
                  "consent.screen.text": ""
                },
                "protocolMappers": [
                  {
                    "id": "18a6079b-68d6-4b76-8d75-ee476cf21159",
                    "name": "minio-mapper",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-attribute-mapper",
                    "consentRequired": false,
                    "config": {
                      "aggregate.attrs": "true",
                      "introspection.token.claim": "true",
                      "multivalued": "true",
                      "userinfo.token.claim": "true",
                      "user.attribute": "policy",
                      "id.token.claim": "true",
                      "lightweight.claim": "false",
                      "access.token.claim": "true",
                      "claim.name": "policy",
                      "jsonType.label": "String"
                    }
                  }
                ]
            }
        ],
        "users":[  
           {
              "username":"amministratore",
              "email":"",
              "enabled":true,
              "firstName":"Amministratore",
              "lastName":"Amministratore",
              "credentials":[
                 {
                    "type":"password",
                    "value":"aministratore_pass"
                 }
              ],
              "groups":[
                 "/consoleAdmins"
              ]
           },
           {
              "username":"utente",
              "email":"",
              "enabled":true,
              "firstName":"Utente",
              "lastName":"Utente",
              "credentials":[
                 {
                    "type":"password",
                    "value":"utente_pass"
                 }
              ],
              "groups":[
                 "/leggiScrittori"
              ]
           }
        ]
      }
  backoffLimit: 8  # Aumenta il limite di tentativi (default è 1)
  extraStartupArgs: "--wait-for-keycloak"  # Esempio di argomento per attendere Keycloak
  
postgresql:
  enabled: true  # Enable PostgreSQL
  auth:
    postgresPassword: ''  # Password per il superuser
    username: bn_keycloak  # Username for the Keycloak database
    password: ''  # Password per il database Keycloak
    database: bitnami_keycloak  # Name of the Keycloak database
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

# External database configuration
externalDatabase:
  host: ''  # Hostname for the external database
  port: 5432  # Port for the external database
  user: bn_keycloak  # Username for the external database
  database: bitnami_keycloak  # Name of the external database
  password: ''  # Password for the external database
  existingSecret: ''  # Secret containing external database credentials
  existingSecretHostKey: ''
  existingSecretPortKey: ''
  existingSecretUserKey: ''
  existingSecretDatabaseKey: ''
  existingSecretPasswordKey: ''
  annotations: {}  # Annotations for the external database configuration
cache:
  enabled: true
  stackName: kubernetes
  stackFile: ''
  useHeadlessServiceWithAppVersion: false
logging:
  output: default
  level: INFO

extraVolumes:
  - name: ca
    configMap:
      name: my-org.com
      defaultMode: 0444
extraVolumeMounts:
  - name: ca
    mountPath: /opt/bitnami/java/lib/security/cacerts
    subPath: ca-certificates.p12
    readOnly: true