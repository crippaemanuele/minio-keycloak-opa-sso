ingress:
  enabled: true
  ingressClassName: "nginx"  # Or your nginx ingress class name
  pathType: ImplementationSpecific
  apiVersion: "networking.k8s.io/v1" # or appropriate version
  controller: default
  hostname: "keycloak.local" # Replace with your domain
  hostnameStrict: false
  path: "/"
  servicePort: http
  annotations:
    # Add cert-manager annotations here:
    cert-manager.io/cluster-issuer: "selfsigned-cluster-issuer" # Replace with your ClusterIssuer name
    nginx.ingress.kubernetes.io/backend-protocol: "http" # Add this line
  labels: {}
  tls: true
  selfSigned: false
  extraHosts: []
  extraPaths: []
  extraTls:
    - hosts:
        - "keycloak.local"
      secretName: "keycloak-tls" # This should match the name of the secret you create
  secrets: []
adminIngress:
  enabled: true
  ingressClassName: "nginx" # Or your nginx ingress class name
  pathType: ImplementationSpecific
  apiVersion: "networking.k8s.io/v1" # or appropriate version
  controller: default
  hostname: "keycloak-admin.local" # Replace with your domain
  path: "/admin"
  servicePort: http
  annotations:
    # Add cert-manager annotations here:
    cert-manager.io/cluster-issuer: "your-cluster-issuer" # Replace with your ClusterIssuer name
    nginx.ingress.kubernetes.io/backend-protocol: "http" # Add this line
  labels: {}
  tls: true
  selfSigned: false
  extraHosts: []
  extraPaths: []
  extraTls:
    - hosts:
        - "keycloak-admin.local"
      secretName: "keycloak-admin-tls" # This should match the name of the secret you create
  secrets: []
tls:
  enabled: false
  autoGenerated: false
  existingSecret: "keycloak-tls" # Create this secret with tls.key and tls.crt
  usePem: true
  truststoreFilename: "keycloak.truststore.jks"
  keystoreFilename: "keycloak.keystore.jks"
  keystorePassword: ""
  truststorePassword: ""
  passwordsSecret: ""
service:
  type: NodePort
  http:
    enabled: true
  ports:
    http: 8080
    https: 8443
  nodePorts:
    http: "" # Minikube will assign these
    https: "" # Minikube will assign these
  sessionAffinity: None
  sessionAffinityConfig: {}
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster
  annotations: {}
  extraPorts: []
  extraHeadlessPorts: []
  headless:
    annotations: {}
    extraPorts: []
auth:
  existingSecret: "keycloak-secrets" # Create this secret with adminPassword, postgres-password, etc.
  passwordSecretKey: "adminPassword"
postgresql:
  auth:
    existingSecret: "keycloak-secrets" #use the same secret
    secretKeys:
      userPasswordKey: "postgres-password"
externalDatabase:
  existingSecret: "keycloak-secrets" #use the same secret
  existingSecretHostKey: "postgres-host"
  existingSecretPortKey: "postgres-port"
  existingSecretUserKey: "postgres-user"
  existingSecretDatabaseKey: "postgres-db"
  existingSecretPasswordKey: "postgres-password"