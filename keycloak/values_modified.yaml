adminIngress:
  annotations: {}
  apiVersion: ''
  controller: default
  enabled: false
  extraHosts: []
  extraPaths: []
  extraRules: []
  extraTls: []
  hostname: keycloak.local
  ingressClassName: ''
  labels: {}
  path: '{{ .Values.httpRelativePath }}'
  pathType: ImplementationSpecific
  secrets: []
  selfSigned: false
  servicePort: http
  tls: false
adminRealm: master
auth:
  adminPassword: ''
  adminUser: user
  annotations: {}
  existingSecret: ''
  import: true
  importRealm: true
  passwordSecretKey: ''
autoscaling:
  behavior:
    scaleDown:
      policies:
      - periodSeconds: 300
        type: Pods
        value: 1
      selectPolicy: Max
      stabilizationWindowSeconds: 300
    scaleUp:
      policies: []
      selectPolicy: Max
      stabilizationWindowSeconds: 120
  enabled: false
  maxReplicas: 11
  minReplicas: 1
  targetCPU: ''
  targetMemory: ''
cache:
  enabled: true
  stackFile: ''
  stackName: kubernetes
  useHeadlessServiceWithAppVersion: false
clusterDomain: cluster.local
commonAnnotations: {}
commonLabels: {}
configuration: ''
customCaExistingSecret: ''
diagnosticMode:
  args:
  - infinity
  command:
  - sleep
  enabled: false
dnsConfig: {}
dnsPolicy: ''
enableServiceLinks: true
existingConfigmap: ''
externalDatabase:
  annotations: {}
  database: bitnami_keycloak
  existingSecret: ''
  existingSecretDatabaseKey: ''
  existingSecretHostKey: ''
  existingSecretPasswordKey: ''
  existingSecretPortKey: ''
  existingSecretUserKey: ''
  host: ''
  password: ''
  port: 5432
  user: bn_keycloak
extraDeploy: []
extraStartupArgs: --import-realm
extraVolumeMounts:
- mountPath: /opt/bitnami/keycloak/data/import
  name: realm-volume
  readOnly: true
extraVolumes:
- configMap:
    name: realm-export
  name: realm-volume
fullnameOverride: ''
global:
  compatibility:
    openshift:
      adaptSecurityContext: auto
  defaultStorageClass: ''
  imagePullSecrets: []
  imageRegistry: ''
  security:
    allowInsecureImages: false
  storageClass: ''
httpRelativePath: /
image:
  debug: false
  digest: ''
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/keycloak
  tag: 26.1.4-debian-12-r2
ingress:
  annotations:
    cert-manager.io/cluster-issuer: selfsigned-cluster-issuer
  apiVersion: ''
  controller: default
  enabled: true
  extraHosts: []
  extraPaths: []
  extraRules: []
  extraTls: []
  hostname: keycloak.local
  hostnameStrict: false
  ingressClassName: nginx
  labels: {}
  path: '{{ .Values.httpRelativePath }}'
  pathType: ImplementationSpecific
  secrets:
  - name: keycloak.local-tls
  selfSigned: false
  servicePort: http
  tls: true
keycloakConfigCli:
  backoffLimit: 5
  configuration:
    existingConfigmap: realm-export
  enabled: true
  extraStartupArgs: --wait-for-keycloak
kubeVersion: ''
livenessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 300
  periodSeconds: 1
  successThreshold: 1
  timeoutSeconds: 5
logging:
  level: INFO
  output: default
metrics:
  enabled: false
  prometheusRule:
    enabled: false
    groups: []
    labels: {}
    namespace: ''
  service:
    annotations:
      prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
      prometheus.io/scrape: 'true'
    extraPorts: []
    ports:
      http: 8080
      https: 8443
      metrics: 9000
  serviceMonitor:
    enabled: false
    endpoints:
    - path: '{{ include "keycloak.httpPath" . }}metrics'
    - path: '{{ include "keycloak.httpPath" . }}realms/{{ .Values.adminRealm }}/metrics'
      port: http
    honorLabels: false
    interval: 30s
    jobLabel: ''
    labels: {}
    metricRelabelings: []
    namespace: ''
    path: ''
    port: metrics
    relabelings: []
    scheme: http
    scrapeTimeout: ''
    selector: {}
    tlsConfig: {}
nameOverride: ''
namespaceOverride: ''
networkPolicy:
  allowExternal: true
  allowExternalEgress: true
  enabled: true
  extraEgress: []
  extraIngress: []
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}
  kubeAPIServerPorts:
  - 443
  - 6443
  - 8443
pdb:
  create: true
  maxUnavailable: ''
  minAvailable: ''
postgresql:
  auth:
    database: bitnami_keycloak
    password: ''
    postgresPassword: ''
    username: bn_keycloak
  enabled: true
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
production: false
proxy: ''
proxyHeaders: ''
rbac:
  create: false
  rules: []
readinessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1
resources: {}
resourcesPreset: small
service:
  annotations: {}
  clusterIP: ''
  externalTrafficPolicy: Cluster
  extraHeadlessPorts: []
  extraPorts: []
  headless:
    annotations: {}
    extraPorts: []
  http:
    enabled: true
  loadBalancerIP: ''
  loadBalancerSourceRanges: []
  nodePorts:
    http: ''
    https: ''
  ports:
    http: 80
    https: 443
  sessionAffinity: None
  sessionAffinityConfig: {}
  type: ClusterIP
serviceAccount:
  annotations: {}
  automountServiceAccountToken: false
  create: true
  extraLabels: {}
  name: ''
spi:
  existingSecret: ''
  hostnameVerificationPolicy: ''
  passwordsSecret: ''
  truststoreFilename: keycloak-spi.truststore.jks
  truststorePassword: ''
startupProbe:
  enabled: false
  failureThreshold: 60
  initialDelaySeconds: 30
  periodSeconds: 5
  successThreshold: 1
  timeoutSeconds: 1
tls:
  autoGenerated: false
  enabled: false
  existingSecret: ''
  keystoreFilename: keycloak.keystore.jks
  keystorePassword: ''
  passwordsSecret: ''
  truststoreFilename: keycloak.truststore.jks
  truststorePassword: ''
  usePem: false
usePasswordFiles: true
