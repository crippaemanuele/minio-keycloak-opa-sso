# Valori di default per OPA.
# --------------------------
#
# Configurazione OPA. Vedi https://www.openpolicyagent.org/docs/configuration.html per dettagli.
opa: {}

# Abilita il webhook tramite cert-manager
certManager:
  enabled: true
  rootCACertificateDuration: 43800h # 5 anni
  servingCertificateDuration: 8760h # 1 anno

# Espone l'endpoint Prometheus per il monitoraggio
prometheus:
  enabled: false
  port: 8182

## ServiceMonitor per prometheus-operator
serviceMonitor:
  enabled: false
  interval: "15s"
  # Namespace dove viene creato il ServiceMonitor
  # namespace: monitoring
  # Etichette aggiuntive per il ServiceMonitor
  additionalLabels: {}

# Annotazioni aggiuntive per il deployment di OPA
annotations: {}

# Policy di bootstrap da caricare all'avvio.
# Definisci le policy in questo modo:
# Esempio:
# bootstrapPolicies:
#   deny-all: |-
#     package kubernetes.admission
#     deny[msg] {
#       msg := "Tutte le richieste sono negate"
#     }
#   log-input: |-
#     package system.log
#     mask["/input"]
bootstrapPolicies:
  admin-only-access: |-
    package minio.authz

    default allow = false

    # Consente accesso completo solo all'utente admin
    allow {
      input.request.accessKey == "minio"
    }


# Configurazione dell'admission controller.
admissionController:
  enabled: false

  # Per abilitare policy mutanti, usa MutatingWebhookConfiguration.
  kind: ValidatingWebhookConfiguration

  # Per aggiungere annotazioni alle risorse dell'admissionController (Secret/Certificate/Issuer/AdmissionController)
  # Esempio:
  # annotations:
  #   team: security

  # Se vuoi che le richieste falliscano in caso di errore, imposta su Fail.
  # Durante i test iniziali, si consiglia Ignore.
  failurePolicy: Ignore

  # Selettore di namespace per il webhook.
  # Esempio: escludi i namespace con l'etichetta openpolicyagent.org/webhook=ignore
  namespaceSelector:
    matchExpressions:
      - {key: openpolicyagent.org/webhook, operator: NotIn, values: [ignore]}

  # Classe di side effect per il webhook. NoneOnDryRun abilita la modalità dry-run.
  sideEffect: None

  # Regole per limitare le risorse e le operazioni soggette a controllo OPA.
  # Esempio: solo create e update su pods
  # rules:
  #   - operations: ["CREATE", "UPDATE"]
  #     apiGroups: [""]
  #     apiVersions: ["v1"]
  #     resources: ["pods"]
  rules:
    - operations: ["*"]
      apiGroups: ["*"]
      apiVersions: ["*"]
      resources: ["*"]

# Il chart Helm genera automaticamente una CA e un certificato server per OPA.
# Se vuoi fornire i tuoi certificati, imposta generateCerts a false e inserisci qui i certificati PEM.
# ATTENZIONE: Il common name del certificato deve corrispondere all'hostname del servizio OPA.
generateCerts: true
CA: ""
cert: ""
key: ""

# PodDisruptionBudget per OPA. Utile se vuoi che OPA sia sempre attivo per l'admission control.
podDisruptionBudget:
  enabled: false
  minAvailable: 1
# maxUnavailable: 1

authz:
  # Disabilita se non vuoi l'autorizzazione (utile per debug).
  enabled: true
  # Per impostare un token di gestione personalizzato:
  # mgmtToken:
  #    secretName: nome-del-secret
  #    secretKey: (opzionale) chiave del secret, default: "mgmtToken"

# Abilita l'uso di hostNetwork per il pod OPA
hostNetwork:
  enabled: false

# Configurazione dell'immagine Docker di OPA.
image:
  repository: openpolicyagent/opa
  tag: 1.3.0
  pullPolicy: IfNotPresent

# Secrets per il pull delle immagini
imagePullSecrets: []
# - registrySecretName

# Abilita/disabilita TLS per OPA.
useHttps: true
# Porta su cui OPA ascolta.
port: 8181

extraArgs: []

# Variabili d'ambiente aggiuntive per il container OPA
extraEnv: []

mgmt:
  enabled: true
  image:
    repository: openpolicyagent/kube-mgmt
    tag: "" # Usa appVersion di default, sovrascrivi se necessario
    pullPolicy: IfNotPresent
  extraArgs: []
  extraEnv: []
  resources: {}

  # Namespace da monitorare. Vuoto = namespace corrente, "*" = tutti.
  namespaces: []

  # Configura la startup probe per kube-mgmt.
  startupProbe:
    failureThreshold: 5
    httpGet:
      path: /health
      port: 8181 # Porta configurata per OPA
      scheme: HTTPS
    initialDelaySeconds: 20
    successThreshold: 1
    timeoutSeconds: 10

  data:
    enabled: true
  policies:
    enabled: true
  # Se vuoi replicare risorse specifiche, aggiungile qui.
  replicate:
    cluster: []
#     - [group/]version/resource
    namespace: []
#     - [group/]version/resource
    path: kubernetes

    ignoreNs: []

# Livello di log per OPA ('debug', 'info', 'error')
logLevel: info

# Formato di log per OPA ('text', 'json')
logFormat: json

# Numero di repliche OPA da distribuire.
replicas: 1

# Affinità, tolerations e nodeSelector per la schedulazione dei pod OPA.
# Esempio per schedulare OPA solo sui nodi master:
# affinity:
#   podAntiAffinity:
#     requiredDuringSchedulingIgnoredDuringExecution:
#     - labelSelector:
#         matchExpressions:
#         - key: "app"
#           operator: In
#           values:
#           - opa
#       topologyKey: "kubernetes.io/hostname"
# tolerations:
# - key: "node-role.kubernetes.io/master"
#   effect: NoSchedule
#   operator: Exists
# nodeSelector:
#   kubernetes.io/role: "master"
affinity: {}
tolerations: []
nodeSelector: {}

# Limiti e richieste di risorse per OPA.
resources: {}

rbac:
  # Crea ClusterRole per kube-mgmt
  create: true
  # Regole extra da aggiungere alla ClusterRole
  extraRules: []
    # - apiGroups: [""]
    #   resources: ["configmaps"]
    #   verbs: ["*"]

serviceAccount:
  # Crea un ServiceAccount dedicato
  create: true
  # Annotazioni per il ServiceAccount
  annotations: {}
  # Nome del ServiceAccount da usare (se vuoto viene generato)
  name:

# Proxy per consentire a OPA di effettuare SubjectAccessReview verso l'API Kubernetes.
sar:
  enabled: false
  image:
    repository: lachlanevenson/k8s-kubectl
    tag: latest
    pullPolicy: IfNotPresent
  resources: {}

# Imposta una priorityClass per OPA
# priorityClassName:

# Timeout per una chiamata webhook in secondi.
# timeoutSeconds: 20

securityContext:
  enabled: false
  runAsNonRoot: true
  runAsUser: 1

deploymentStrategy: {}
  # rollingUpdate:
  #   maxSurge: 1
  #   maxUnavailable: 0
  # type: RollingUpdate

extraContainers: []
## Contenitori aggiuntivi da aggiungere al pod OPA.
# - name: esempio-app
#   image: esempio/immagine:latest
#   args:
#     - "run"
#     - "--port=11811"
#     - "--config=/etc/esempio-app-conf/config.yaml"
#     - "--opa-endpoint=https://localhost:443"
#   ports:
#     - name: http
#       containerPort: 11811
#       protocol: TCP
#   volumeMounts:
#     - name: esempio-app-auth-config
#       mountPath: /etc/esempio-app-conf

extraVolumes: []
## Volumi aggiuntivi per il pod OPA.
# - name: esempio-app-auth-config
#   secret:
#     secretName: esempio-app-auth-config

extraVolumeMounts: []
## Mount per i volumi aggiuntivi
#  - name: esempio-app-auth-config
#    mountPath: /mount/path

extraPorts: []
## Porte aggiuntive da esporre nei servizi OPA.
# - port: 11811
#   protocol: TCP
#   name: http
#   targetPort: http
